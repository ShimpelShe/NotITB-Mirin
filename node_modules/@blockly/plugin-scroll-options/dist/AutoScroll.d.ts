/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import * as Blockly from 'blockly/core';
import { ScrollBlockDragger } from './ScrollBlockDragger';
/**
 * AutoScroll is used to scroll/pan the workspace automatically. For example,
 * when a user drags a block near the edge of the workspace, it can begin
 * automatically scrolling in that direction.
 *
 * Call `updateProperties` with a vector containing scroll velocity in each
 * direction, in pixels per ms. AutoScroll will use animation frames to smoothly
 * scroll the workspace at a constant velocity. Call `stopAndDestroy` to cancel
 * the AutoScroll animation. You must ensure this is called eventually, or you
 * may get stuck in an infinite animation loop and crash the browser.
 */
export declare class AutoScroll {
    /** Workspace to scroll. */
    protected workspace_: Blockly.WorkspaceSvg;
    protected dragger: ScrollBlockDragger;
    /**
     * Current active vector representing scroll velocity in pixels per
     * millisecond in each direction.
     */
    protected activeScrollVector_: Blockly.utils.Coordinate;
    /** ID of active requestAnimationFrame callback key. */
    protected animationFrameId_: number;
    /** Time in ms last animation frame was run. */
    protected lastTime_: number;
    /**
     * Whether the scroll animation should continue. If this is false, the next
     * animation frame will not be requested.
     */
    protected shouldAnimate_: boolean;
    /**
     * Creates an AutoScroll instance for a specified workspace.
     *
     * @param workspace Workspace to scroll.
     * @param dragger The dragger that's currently dragging.
     * @constructor
     */
    constructor(workspace: Blockly.WorkspaceSvg, dragger: ScrollBlockDragger);
    /**
     * Cancels the current autoscroll and resets properties.
     */
    stopAndDestroy(): void;
    /**
     * Ticks scrolling behavior and triggers another
     * frame request.
     *
     * @param now Current time in ms. This is usually passed
     *     automatically by `requestAnimationFrame`.
     */
    protected nextAnimationStep_(now: number): void;
    /**
     * Perform scroll given time passed.
     *
     * @param msPassed Number of ms since last scroll tick.
     */
    protected scrollTick_(msPassed: number): void;
    /**
     * Scrolls the workspace the given amount during a block drag.
     * Also updates the dragger based on the amount actually scrolled.
     *
     * @param scrollDx Amount to scroll in horizontal direction.
     * @param scrollDy Amount to scroll in vertical direction.
     */
    scrollWorkspaceWithBlock(scrollDx: number, scrollDy: number): void;
    /**
     * Updates the scroll vector for the current autoscroll and begins the
     * animation if needed.
     *
     * @param scrollVector New scroll velocity vector
     *     in pixels per ms.
     */
    updateProperties(scrollVector: Blockly.utils.Coordinate): void;
}
//# sourceMappingURL=AutoScroll.d.ts.map