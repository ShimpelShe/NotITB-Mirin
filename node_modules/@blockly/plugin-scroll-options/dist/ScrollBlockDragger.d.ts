/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import * as Blockly from 'blockly/core';
import { AutoScroll } from './AutoScroll';
type CandidateScrolls = Record<string, Blockly.utils.Coordinate[]>;
export interface EdgeScrollOptions {
    /** Pixels per ms to scroll when the block is near the edge of the workspace. */
    slowBlockSpeed: number;
    /**
     * Pixels per ms to scroll when the block is
     * far past the edge of the workspace.
     */
    fastBlockSpeed: number;
    /**
     * Distance in workspace units that
     * the edge of the block is from the edge of the viewport before the
     * corresponding scroll speed will be used. Can be negative to start scrolling
     * before the block extends over the edge.
     */
    slowBlockStartDistance: number;
    /**
     * Same as above, for fast speed.
     * Must be larger than `slowBlockStartDistance`.
     */
    fastBlockStartDistance: number;
    /**
     * If a block takes up this
     * percentage of the viewport or more, it will be considered oversized. Rather
     * than using the block edge, we use the mouse cursor plus the given margin size
     * to activate block-based scrolling.
     */
    oversizeBlockThreshold: number;
    /**
     * Cursor margin to use for oversized
     * blocks. A bigger value will cause the workspace to scroll sooner, i.e., the
     * mouse can be further inward from the edge when scrolling begins.
     */
    oversizeBlockMargin: number;
    /**
     * Pixels per ms to
     * scroll when the mouse is near the edge of the workspace.
     */
    slowMouseSpeed: number;
    /**
     * Pixels per ms to
     * scroll when the mouse is far past the edge of the workspace.
     */
    fastMouseSpeed: number;
    /**
     * Distance in workspace units that
     * the mouse is from the edge of the viewport before the corresponding scroll
     * speed will be used. Can be negative to start scrolling before the mouse
     * extends over the edge.
     */
    slowMouseStartDistance: number;
    /**
     * Same as above, for fast speed.
     * Must be larger than `slowMouseStartDistance`.
     */
    fastMouseStartDistance: number;
}
/**
 * A block dragger that adds the functionality for a block to be moved while
 * someone is dragging it.
 */
export declare class ScrollBlockDragger extends Blockly.dragging.Dragger {
    /** How much the block has been moved due to scrolling. */
    protected scrollDelta_: Blockly.utils.Coordinate;
    /** How much the block has been moved due to dragging. */
    protected dragDelta_: Blockly.utils.Coordinate;
    /** Possible directions the workspace could be scrolled. */
    protected scrollDirections_: ['top', 'bottom', 'left', 'right'];
    /**
     * Unit vector for each direction that could be scrolled. This vector will
     * be scaled to get the calculated velocity in each direction.
     */
    private SCROLL_DIRECTION_VECTORS_;
    activeAutoScroll_: AutoScroll | null;
    /**
     * Whether the behavior to scroll the workspace when a block is dragged near
     * the edge is enabled.
     */
    static edgeScrollEnabled: boolean;
    /** Configuration options for the scroll-options settings. */
    static options: EdgeScrollOptions;
    /**
     * Updates the location of the block that is being dragged.
     *
     * @param deltaX Horizontal offset in pixel units.
     * @param deltaY Vertical offset in pixel units.
     */
    moveBlockWhileDragging(deltaX: number, deltaY: number): void;
    /**
     * Passes the total amount the block has moved (both from dragging and from
     * scrolling) since it was picked up.
     *
     * @override
     */
    onDrag(e: PointerEvent, dragDelta: Blockly.utils.Coordinate): void;
    /**
     * @override
     */
    onDragEnd(e: PointerEvent): void;
    /**
     * May scroll the workspace as a block is dragged.
     * If a block is dragged near the edge of the workspace, this method will
     * cause the workspace to scroll in the direction the block is being
     * dragged. The workspace will not resize as the block is dragged. The
     * workspace should appear to move out from under the block, i.e., the block
     * should stay under the user's mouse.
     *
     * @param e The mouse/touch event for the drag.
     */
    protected scrollWorkspaceWhileDragging_(e: PointerEvent): void;
    /**
     * There could be multiple candidate scrolls for each direction, such as one
     * for block position and one for mouse position. We should first find the
     * fastest scroll in each direction. Then, we sum those to find the overall
     * scroll vector.
     *
     * For example, we may have a fast block scroll and a slow
     * mouse scroll candidate in both the top and left directions. First, we
     * reduce to only the fast block scroll. Then, we sum the vectors in each
     * direction to get a resulting fast scroll in a diagonal direction to the
     * top left.
     *
     * @param candidateScrolls Existing lists of candidate
     *     scrolls. Will be modified in place.
     * @returns Overall scroll vector.
     */
    protected getOverallScrollVector_(candidateScrolls: CandidateScrolls): Blockly.utils.Coordinate;
    /**
     * Gets the candidate scrolls based on the position of the block on the
     * workspace. If the block is near/over the edge, a candidate scroll will be
     * added based on the options provided.
     *
     * This method can be overridden to further customize behavior, e.g. To add
     * a third speed option.
     *
     * @param candidateScrolls Existing list of candidate
     *     scrolls. Will be modified in place.
     * @param viewMetrics View metrics for the workspace.
     * @param mouse Mouse coordinates.
     */
    protected computeBlockCandidateScrolls_(candidateScrolls: CandidateScrolls, viewMetrics: Blockly.MetricsManager.ContainerRegion, mouse: Blockly.utils.Coordinate): void;
    /**
     * Gets the candidate scrolls based on the position of the mouse cursor
     * relative to the workspace. If the mouse is near/over the edge, a
     * candidate scroll will be added based on the options provided.
     *
     * This method can be overridden to further customize behavior, e.g. To add
     * a third speed option.
     *
     * @param candidateScrolls Existing list of candidate
     *     scrolls. Will be modified in place.
     * @param viewMetrics View metrics for the workspace.
     * @param mouse Mouse coordinates.
     */
    protected computeMouseCandidateScrolls_(candidateScrolls: CandidateScrolls, viewMetrics: Blockly.MetricsManager.ContainerRegion, mouse: Blockly.utils.Coordinate): void;
    /**
     * Gets the amount of overflow of a box relative to the workspace viewport.
     *
     * The value for each direction will be how far the given block edge is from
     * the given edge of the viewport. If the block edge is outside the
     * viewport, the value will be positive. If the block edge is inside the
     * viewport, the value will be negative.
     *
     * This method also checks for oversized blocks. If the block is very large
     * relative to the viewport size, then we will actually use a small zone
     * around the cursor, rather than the edge of the block, to calculate the
     * overflow values. This calculation is done independently in both the
     * horizontal and vertical directions. These values can be configured in the
     * options for the plugin.
     *
     * @param viewMetrics View metrics for the workspace.
     * @param mouse Mouse coordinates.
     */
    protected getBlockBoundsOverflows_(viewMetrics: Blockly.MetricsManager.ContainerRegion, mouse: Blockly.utils.Coordinate): {
        [key: string]: number;
    };
    /**
     * Gets the amount of overflow of the mouse coordinates relative to the
     * viewport.
     *
     * The value for each direction will be how far the pointer is from
     * the given edge of the viewport. If the pointer is outside the viewport,
     * the value will be positive. If the pointer is inside the viewport, the
     * value will be negative.
     *
     * @param viewMetrics View metrics
     *     for the workspace.
     * @param mouse Mouse coordinates.
     * @returns An object describing the amount of
     *     overflow in each direction.
     */
    protected getMouseOverflows_(viewMetrics: Blockly.MetricsManager.ContainerRegion, mouse: Blockly.utils.Coordinate): {
        [key: string]: number;
    };
    /**
     * Cancel any AutoScroll. This must be called when there is no need to
     * scroll further, e.g., when no longer dragging near the edge of the
     * workspace, or when no longer dragging at all.
     */
    stopAutoScrolling(): void;
    /**
     * Update the scroll options. Only the properties actually included in the
     * `options` parameter will be set. Any unspecified options will use the
     * previously set value (where the initial value is from `defaultOptions`).
     * Therefore, do not pass in any options with explicit `undefined` or `null`
     * values. The plugin will break. Just leave them out of the object if you
     * don't want to change the default value.
     *
     * This method is safe to call multiple times. Subsequent calls will add onto
     * previous calls, not completely overwrite them. That is, if you call this
     * with:
     *
     * `updateOptions({fastMouseSpeed: 5});
     * updateOptions({slowMouseSpeed: 2});`.
     *
     * Then the final options used will include both `fastMouseSpeed: 5` and
     * `slowMouseSpeed: 2` with all other options being the default values.
     *
     * @param options Object containing any or all of
     *     the available options. Any properties not present will use the existing
     *     value.
     */
    static updateOptions: (options: Partial<EdgeScrollOptions>) => void;
    /**
     * Resets the options object to the default options.
     */
    static resetOptions: () => void;
}
export {};
//# sourceMappingURL=ScrollBlockDragger.d.ts.map